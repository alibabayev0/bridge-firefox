pluginManagement {
    includeBuild("../android-components/plugins/publicsuffixlist")
    includeBuild("../android-components/plugins/dependencies")
    includeBuild("../android-components/plugins/config")
    includeBuild("../android-components/plugins/github")
}

plugins {
    id "mozac.ConfigPlugin"
    id 'mozac.DependenciesPlugin'
    id 'mozac.GitHubPlugin'
}

apply from: file('../shared-settings.gradle')

include ':app'
include ':benchmark'

gradle.projectsLoaded { ->
    // Disables A-C tests and lint when building Fenix.
    gradle.allprojects { project ->
        if (project.projectDir.absolutePath.contains("/android-components/")) {
            project.tasks.withType(Test).configureEach {
                enabled = false
            }
            project.tasks.configureEach { task ->
                if (task.name.contains("lint")) {
                    task.enabled = false
                }
            }
        }

        def appServicesSrcDir = null
        if (gradle.hasProperty('localProperties.autoPublish.application-services.dir')) {
            appServicesSrcDir = gradle.getProperty('localProperties.autoPublish.application-services.dir')
        } else if (gradle.hasProperty('localProperties.branchBuild.application-services.dir')) {
            appServicesSrcDir = gradle.getProperty('localProperties.branchBuild.application-services.dir')
        }
        if (appServicesSrcDir) {
            if (appServicesSrcDir.startsWith("/")) {
                apply from: "${appServicesSrcDir}/build-scripts/substitute-local-appservices.gradle"
            } else {
                apply from: "${rootProject.projectDir}/${appServicesSrcDir}/build-scripts/substitute-local-appservices.gradle"
            }
        }
    }
}

def log(message) {
    logger.lifecycle("[settings] ${message}")
}

def runCmd(cmd, workingDir, successMessage, captureStdout=true) {
    def proc = cmd.execute(null, new File(workingDir))
    def standardOutput = captureStdout ? new ByteArrayOutputStream() : System.out
    proc.consumeProcessOutput(standardOutput, System.err)
    proc.waitFor()

    if (proc.exitValue() != 0) {
        throw new GradleException("Process '${cmd}' finished with non-zero exit value ${proc.exitValue()}");
    } else {
        log(successMessage)
    }
    return captureStdout ? standardOutput : null
}

//////////////////////////////////////////////////////////////////////////
// Local Development overrides
//////////////////////////////////////////////////////////////////////////

Properties localProperties = null
String settingAppServicesPath = "autoPublish.application-services.dir"
String settingAndroidComponentsPath = "autoPublish.android-components.dir"

if (file('local.properties').canRead()) {
    localProperties = new Properties()
    localProperties.load(file('local.properties').newDataInputStream())
    log('Loaded local.properties')
} else {
    log('Missing local.properties; see https://github.com/mozilla-mobile/fenix/blob/master/README.md#local-properties-helpers for instructions.')
}

if (localProperties != null) {
    localProperties.each { prop ->
        gradle.ext.set("localProperties.${prop.key}", prop.value)
    }

    String appServicesLocalPath = localProperties.getProperty(settingAppServicesPath)

    if (appServicesLocalPath != null) {
        log("Enabling automatic publication of application-services from: $appServicesLocalPath")
        def publishAppServicesCmd = ["./automation/publish_to_maven_local_if_modified.py"]
        runCmd(publishAppServicesCmd, appServicesLocalPath, "Published application-services for local development.", false)
    } else {
        log("Disabled auto-publication of application-services. Enable it by settings '$settingAppServicesPath' in local.properties")
    }

    String androidComponentsLocalPath = localProperties.getProperty(settingAndroidComponentsPath)

    if (androidComponentsLocalPath != null) {
        log("Enabling automatic publication of android-components from: $androidComponentsLocalPath")
        def publishAcCmd = ["./automation/publish_to_maven_local_if_modified.py"]
        runCmd(publishAcCmd, androidComponentsLocalPath, "Published android-components for local development.", false)
    } else {
        log("Disabled auto-publication of android-components. Enable it by settings '$settingAndroidComponentsPath' in local.properties")
    }
}